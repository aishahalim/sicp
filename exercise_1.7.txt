Exercise 1.7.  The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

sqrt x = y 
sqr ( sqrt x ) = sqr y
x = y^2

if x is really small, then y has to be y times smaller than itself. Meaning, y's precision needs to increase more and more. If you look at the graph between x and y for x [0,1]:
  y 
  ^
1 |--[--.
  | [   |
  |[____|_>x
0 |     1  

you see the precision getting unweildly in the perspective of computing when subtracting each miniscule guess n number of times before reaching the desired threshold

if x is really large, y guesses need to average out much more frequently to approach the threshold -- it takes longer to reach


the solution:

(define (average x y)
 (/ (+ x y) 2))

(define (improve guess x)
 (average guess (/ x guess)))

(define (good-enough-d? guess oldguess)
 (if (= oldguess 0)
  false
  (< (- guess oldguess) 0.01)))

(define (sqrt-iter-d guess x oldguess)
 (if (good-enough-d? guess oldguess)
  guess
  (sqrt-iter-d (improve guess x) x guess)))

(define (sqrt-iter guess x)
 (sqrt-iter-d guess x 0))

(define (sqrt x)
  (sqrt-iter 1.0 x))


It looks like the larger the number, the worse the guess is because it doesn't iterate precisely enough. This works really well for small numbers. My original understanding was around how easiy it'll be to reach a guess, but didn't account for the farther spaced out guesses are, the easier it is to reach the 0.01 difference threshold I've set here since it's asymptotic, and on that end, and is very inaccurate at that point

My solution isn't good enough so I continued to see the inaccuracy for larger numbers because mine is a constant tolerance instead of a linear tolerance that would adapt better:
from an online soltn
(define (good-enough-online? guess oldguess)
 (< (/ (- a b) a) 0.001))

If you simplify this mathematically, you get

(define (good-enough-online? guess oldguess)
 (< (* 0.999 guess) oldguess))

which makes the guess and oldguess vary linearly rather than a constant that's inaccurate (if the function is parabolic, its derivative...i.e. "good enough o meter" should be linear)
